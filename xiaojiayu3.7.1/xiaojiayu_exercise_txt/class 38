# 038类和对象：继承

0. 继承机制给程序猿带来最明显的好处是？
答：可以省略相同的方法和属性。
如果一个类 A 继承自另一个类 B，就把这个 A 称为 B 的子类，把 B 称为 A 的父类、基类或超类。继承可以使得子类具有父类的各种属性和方法，而不需要再次编写相同的代码。
在子类继承父类的同时，可以重新定义某些属性，并重写某些方法，即覆盖父类的原有属性和方法，使其获得与父类不同的功能。另外，为子类追加新的属性和方法也是常见的做法。


1. 如果按以下方式重写魔法方法 __init__，结果会怎样？
class MyClass:
    def __init__(self):
        return "I love FishC.com!"
答：会报错，因为 __init__ 特殊方法不应当返回除了 None 以外的任何对象。
这里不用 return 用 print 就可以。


2. 当子类定义了与相同名字的属性或方法时，Python 是否会自动删除父类的相关属性或方法？
答：不会删除！Python 的做法跟其他大部分面向对象编程语言一样，都是将父类属性或方法覆盖，子类对象调用的时候会调用到覆盖后的新属性或方法，但父类的仍然还在，只是子类对象“看不到”。


3. 假设已经有鸟类的定义，现在我要定义企鹅类继承于鸟类，但我们都知道企鹅是不会飞的，我们应该如何屏蔽父类（鸟类）中飞的方法？
答：覆盖父类方法，例如将函数体内容写 pass，这样调用 fly 方法就没有任何反应了。
class Bird:
        def fly(self):
                print("Fly away!")
class Penguin(Bird):
        def fly(self):
                pass
>>> bird = Bird()
>>> penguin = Penguin()
>>> bird.fly()
Fly away!
>>> penguin.fly()



4. super 函数有什么“超级”的地方？
答：super 函数超级之处在于你不需要明确给出任何基类的名字，它会自动帮您找出所有基类以及对应的方法。
由于你不用给出基类的名字，这就意味着你如果需要改变了类继承关系，你只要改变 class 语句里的父类即可，而不必在大量代码中去修改所有被继承的方法。


5. 多重继承使用不当会导致重复调用（也叫钻石继承、菱形继承）的问题，请分析以下代码在实际编程中有可能导致什么问题？
class A():
    def __init__(self):
        print("进入A…")
        print("离开A…")

class B(A):
    def __init__(self):
        print("进入B…")
        A.__init__(self)
        print("离开B…")

class C(A):
    def __init__(self):
        print("进入C…")
        A.__init__(self)
        print("离开C…")

class D(B, C):
    def __init__(self):
        print("进入D…")
        B.__init__(self)
        C.__init__(self)
        print("离开D…")



6. 如何解决上一题中出现的问题？