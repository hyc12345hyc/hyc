# 037类和对象：面向对象编程

0. 以下代码体现了面向对象编程的什么特征？
>>> "FishC.com".count('o')
1
>>> [1, 1, 2, 3, 5, 8].count(1)
2
>>> (0, 2, 4, 8, 12, 18).count(1)
0
答：体现了面向对象编程的多态特征。


1. 当程序员不想把同一段代码写几次，他们发明了函数解决了这种情况。当程序员已经有了一个类，而又想建立一个非常相近的新类，他们会怎么做呢？
答：他们会定义一个新类继承已有的这个类，这样子就只需要简单添加和重写需要的方法即可。
例如已有龟类，那么如果要新定义一个甲鱼类，我们只需要让甲鱼类继承已有的龟类，然后重写壳的属性为“软的”即可。


2. self参数的作用是什么？
答：绑定方法，据说有了这个参数，Python 再也不会傻傻分不清是哪个对象在调用方法了，你可以认为方法中的 self 其实就是实例对象的唯一标志。


3. 如果我们不希望对象的属性或方法被外部直接引用，我们可以怎么做？
答：我们可以在属性或方法名字前边加上双下划线，这样子从外部是无法直接访问到，会显示AttributeError错误。


4. 类在实例化后哪个方法会被自动调用？
答：__init__方法会在类实例化时被自动调用，我们称之为魔法方法。你可以重写这个方法，为对象定制初始化方案。


5. 请解释下边代码错误的原因：
class MyClass:
        name = 'FishC'
        def myFun(self):
                print("Hello FishC!")

>>> MyClass.name
'FishC'
>>> MyClass.myFun()
Traceback (most recent call last):
  File "<pyshell#6>", line 1, in <module>
    MyClass.myFun()
TypeError: myFun() missing 1 required positional argument: 'self'
>>>
答：首先你要明白类、类对象、实例对象是三个不同的名词。
我们常说的类指的是类定义，由于“Python无处不对象”，所以当类定义完之后，自然就是类对象。在这个时候，你可以对类的属性（变量）进行直接访问（MyClass.name）。
一个类可以实例化出无数的对象（实例对象），Python 为了区分是哪个实例对象调用了方法，于是要求方法必须绑定（通过 self 参数）才能调用。
而未实例化的类对象直接调用方法，因为缺少 self 参数，所以就会报错。